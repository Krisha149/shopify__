******************************************************************Shopify App Documentation:--*********************************************************************************

#Overview-----
This JavaScript-based Shopify cart management app allows users to browse a product gallery, add items to their cart, manage cart contents, and handle authentication. 
It provides features such as calculating order totals, applying gift wrap charges, and generating discount coupons. The app also ensures cart persistence using localStorage 
so that users can retain their cart data between sessions.

#How the App Works
--Product Gallery:
Products are displayed dynamically in a gallery with Add to Cart buttons.
Users can add products to their cart by clicking these buttons.

--Authentication:
Users can sign up, sign in, and log out.
A popup form handles both sign-in and sign-up processes.
If a user logs in with correct credentials, they are redirected to the cart page.

--Cart Management:
The cart maintains state across sessions using localStorage.
Users can add, view, and remove products from their cart.
Clicking the Clear Cart button removes all products and resets totals.

--Order Total Calculation:
The subtotal is calculated as the sum of product prices in the cart.
A 5% E-Pay tax is added, and an optional gift wrap amount is displayed.
Order total = Subtotal + E-Pay tax + Gift wrap amount.

--Discount Coupon:
Upon successful payment, the app generates a random discount coupon for the user.

--Cart Persistence:
The cart contents are saved in localStorage to ensure data persistence between sessions.
On login, the cart is reloaded, and totals are reset to avoid stale data.

#Technical Implementation--
--Technologies Used:
HTML, CSS, JavaScript for frontend.
localStorage for state management and data persistence.

--Key Components:

--Product Gallery Rendering:
Products are stored in an array and dynamically rendered using document.createElement().

--Cart Persistence:
Cart items are saved and retrieved from localStorage to maintain data between sessions.

--Authentication System:
Users are stored in localStorage with email and password for a simple login mechanism.

--Order Calculation:
Subtotal and E-Pay tax are dynamically calculated, and gift wrap costs are displayed with each update.

--Popup Management:
JavaScript handles showing/hiding sign-in and sign-up popups based on user interaction.

#Challenges Faced--

--Cart State Management:
Ensuring the cart contents persisted correctly between user sessions required careful use of localStorage.

--Resetting Gift Wrap Amount on Login:
Handling inconsistencies when the same user logs in multiple times involved resetting totals correctly.

--Popup Handling:
Managing multiple popups (sign-in, sign-up) and their visibility based on the user's interaction was tricky to coordinate smoothly.

#Assumptions Made--

--Simple Authentication:
No backend is used for authentication, and passwords are stored in localStorage, assuming itâ€™s a prototype or demo application.

--Basic Cart Functionality:
The app assumes users will not make simultaneous purchases from different browsers or devices.

--Static Product Data:
The products are hardcoded, with no dynamic API or backend for fetching product information.

#Future Improvements--

--Secure Authentication:
Implement OAuth or Firebase authentication for better security.

--Backend Integration:
Use a backend server (like Django or Node.js) to handle product data and cart logic.

--UI Enhancements:
Add animations and improved styling for popups and product galleries.

--Discount Coupon System:
Provide dynamic coupon values instead of fixed random amounts for a better user experience.

--Cart Sync Across Devices:
Store cart data on the server to allow users to access their carts from multiple devices.

--Real-Time Inventory Management:
Check product availability before allowing users to add items to the cart.
